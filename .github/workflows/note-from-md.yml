name: "Note: Post from Markdown"

on:
  workflow_dispatch:
    inputs:
      markdown_path:
        description: "Path to .md under articles/"
        required: true
        default: "articles/sample.md"
      is_public:
        description: "Publish? true:公開 / false:下書き保存"
        required: true
        default: "false"
  push:
    branches: [ claude/pickup-branch-011CURbcRkWiWUgHxg4ZSi3M ]
    paths:
      - "articles/**/*.md"

jobs:
  post-from-md:
    runs-on: ubuntu-latest
    timeout-minutes: 25
    steps:
      - uses: actions/checkout@v4

      - uses: actions/setup-node@v4
        with:
          node-version: "20"

      - name: Resolve inputs
        id: vars
        run: |
          # Detect if triggered by push event
          EVENT_NAME="${{ github.event_name }}"

          if [ "$EVENT_NAME" = "push" ]; then
            # Auto-detect changed markdown files in articles/
            CHANGED_FILES=$(git diff --name-only ${{ github.event.before }} ${{ github.sha }} | grep '^articles/.*\.md$' || true)

            if [ -z "$CHANGED_FILES" ]; then
              echo "No markdown files changed in articles/"
              exit 0
            fi

            # Use the first changed file
            MP=$(echo "$CHANGED_FILES" | head -n 1)
            ISP="false"  # Always draft for auto-triggered posts

            echo "Auto-detected file: $MP"
          else
            # workflow_dispatch: read from inputs
            MP=$(node -e 'try{const fs=require("fs");const p=JSON.parse(fs.readFileSync(process.env.GITHUB_EVENT_PATH,"utf8"));process.stdout.write((p.inputs&&p.inputs.markdown_path)||"");}catch{process.stdout.write("");}')
            ISP=$(node -e 'try{const fs=require("fs");const p=JSON.parse(fs.readFileSync(process.env.GITHUB_EVENT_PATH,"utf8"));process.stdout.write((p.inputs&&p.inputs.is_public)||"");}catch{process.stdout.write("");}')

            if [ -z "$MP" ]; then MP="articles/sample.md"; fi
            if [ -z "$ISP" ]; then ISP="false"; fi
          fi

          echo "markdown_path=$MP" >> $GITHUB_OUTPUT
          echo "is_public=$ISP" >> $GITHUB_OUTPUT

          # Also export as environment variables for subsequent steps
          echo "MARKDOWN_PATH=$MP" >> $GITHUB_ENV
          echo "IS_PUBLIC=$ISP" >> $GITHUB_ENV

      - name: Install deps
        run: |
          if [ -f package-lock.json ]; then npm ci; else npm i; fi
          # 一時インストール（package.jsonの変更は不要）
          npm i --no-save gray-matter @anthropic-ai/sdk playwright
          npx playwright install --with-deps chromium

      - name: Restore note login state
        env:
          STATE_JSON: ${{ secrets.NOTE_STORAGE_STATE_JSON }}
        run: |
          test -n "$STATE_JSON" || (echo "ERROR: NOTE_STORAGE_STATE_JSON secret is not set"; exit 1)
          printf '%s' "$STATE_JSON" > note-state.json
          test -s note-state.json || (echo "NOTE_STORAGE_STATE_JSON is empty"; exit 1)

      - name: Optimize markdown style (Anthropic)
        env:
          ANTHROPIC_API_KEY: ${{ secrets.ANTHROPIC_API_KEY }}
        run: |
          mkdir -p .out
          node scripts/md-style-optimize.mjs \
            --in="$MARKDOWN_PATH" \
            --out=".out/optimized.md"

      - name: Post to note (Playwright)
        env:
          NOTE_BASE_URL: "https://note.com"
          NOTE_EDITOR_DELAY_MS: "0"
        run: |
          node scripts/post-from-md.mjs \
            --in=".out/optimized.md" \
            --storage="./note-state.json" \
            --is-public="$IS_PUBLIC"

      - name: Upload debug screenshots
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: debug-screenshots
          path: |
            debug-*.png
          if-no-files-found: ignore
